import mido
from mido import MidiFile, MidiTrack, Message
import random

# Constants
TEMPO = 500000
SCALE = [60, 62, 64, 65, 67, 69, 71]  # C Major Scale
CHORDS = [
    [60, 64, 67],  # C Major
    [62, 65, 69],  # D Minor
    [64, 67, 71],  # E Minor
    [65, 69, 72],  # F Major
]
DURATIONS = [480]  # Keep to quarter notes for simplicity in this example
VELOCITIES = [50, 64, 80, 96]

DRUM_KICK = 36  # MIDI note for kick drum

class ElectroBolt:
    def __init__(self, num_of_songs):
        self.album = Album(num_of_songs, "electronic")

    def save_album(self):
        self.album.save()

class Album:
    def __init__(self, num_of_songs, style):
        self.songs = [Song(style) for _ in range(num_of_songs)]
    
    def save(self):
        for idx, song in enumerate(self.songs):
            song.midi.save(f'ElectroBolt_Song_{idx}.mid')

class Song:
    def __init__(self, style):
        self.midi = MidiFile()
        self.create_tracks()
        
        self.compose_drums()
        self.compose_bass()
        self.compose_chords()
        self.compose_lead()

    def create_tracks(self):
        self.drums = MidiTrack()
        self.bass = MidiTrack()
        self.chords = MidiTrack()
        self.lead = MidiTrack()

        self.midi.tracks.append(self.drums)
        self.midi.tracks.append(self.bass)
        self.midi.tracks.append(self.chords)
        self.midi.tracks.append(self.lead)

    def compose_drums(self):
        # Four-on-the-floor kicks
        for _ in range(16):  # 16 beats (4 bars of 4/4 time)
            self.drums.append(Message('note_on', note=DRUM_KICK, velocity=96, time=0))
            self.drums.append(Message('note_off', note=DRUM_KICK, velocity=96, time=480))  # quarter note

    def compose_bass(self):
        # Random bassline based on the scale
        for _ in range(4):
            note = random.choice(SCALE)
            self.bass.append(Message('note_on', note=note, velocity=80, time=0))
            self.bass.append(Message('note_off', note=note, velocity=80, time=480))  # quarter note

    def compose_chords(self):
        # Random chord progression
        for _ in range(4):
            chord = random.choice(CHORDS)
            for note in chord:
                self.chords.append(Message('note_on', note=note, velocity=64, time=0))
            for note in chord:
                self.chords.append(Message('note_off', note=note, velocity=64, time=480))  # quarter note

    def compose_lead(self):
        # Random lead melody based on the scale
        for _ in range(16):  # 16 beats worth of melody
            note = random.choice(SCALE)
            self.lead.append(Message('note_on', note=note, velocity=96, time=0))
            self.lead.append(Message('note_off', note=note, velocity=96, time=120))  # eighth note, for faster melody

if __name__ == "__main__":
    musician = ElectroBolt(num_of_songs=3)
    musician.save_album()
